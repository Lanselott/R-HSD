model {
  faster_rcnn {
    num_classes: 3
    image_resizer {
      keep_aspect_ratio_resizer {
        min_dimension: 256
        max_dimension: 256
      }
    }
    #number_of_stages: 1 
    feature_extractor {
      type: 'encoder_decoder_faster_rcnn_inception_v2_with_ratio_loss'
      first_stage_features_stride: 16
    }
    first_stage_anchor_generator {
      grid_anchor_generator {
        scales: [0.25, 0.5, 1.0, 2.0]
        aspect_ratios: [0.5, 1.0, 2.0]
        height_stride: 16
        width_stride: 16
      }
    }
    first_stage_box_predictor_conv_hyperparams {
      op: CONV
      regularizer {
        l2_regularizer {
          weight: 0.2
        }
      }
      initializer {
        truncated_normal_initializer {
          stddev: 0.01
        }
      }
    }
    first_stage_nms_score_threshold: 0.0
    first_stage_nms_iou_threshold: 0.7
    first_stage_max_proposals: 200
    first_stage_localization_loss_weight: 2.0
    first_stage_objectness_loss_weight: 1.0
    initial_crop_size: 14
    maxpool_kernel_size: 2
    maxpool_stride: 2
    second_stage_box_predictor {
      mask_rcnn_box_predictor {
        use_dropout: false
        dropout_keep_probability: 1
        fc_hyperparams {
          op: FC
          regularizer {
            l2_regularizer {
              weight: 0.2
            }
          }
          initializer {
            variance_scaling_initializer {
              factor: 1.0
              uniform: true
              mode: FAN_AVG
            }
          }
        }
      }
    }
    second_stage_post_processing {
      batch_non_max_suppression {
        score_threshold: 0.0
        iou_threshold: 0.6
        max_detections_per_class: 50
        max_total_detections: 200
      }
      score_converter: SOFTMAX
    }
    second_stage_localization_loss_weight: 2.0
    second_stage_classification_loss_weight: 1.0
  }
}

train_config: {
  batch_size: 12
  optimizer {
    momentum_optimizer: {
      learning_rate: {
        manual_step_learning_rate {
          initial_learning_rate: 0.0002
          schedule {
            step: 30000
            learning_rate: .00002
          }
          schedule {
            step: 50000
            learning_rate: .000002
          }
        }
      }
      momentum_optimizer_value: 0.9
    }
    use_moving_average: false
  }
  gradient_clipping_by_norm: 10.0
  # fine_tune_checkpoint: "#PATH"
  from_detection_checkpoint: false
  # Note: The below line limits the training process to 200K steps, which we
  # empirically found to be sufficient enough to train the COCO dataset. This
  # effectively bypasses the learning rate schedule (the learning rate will
  # never decay). Remove the below line to train indefinitely.
  num_steps: 120000
  data_augmentation_options {
    random_horizontal_flip {
    }
  }
}

train_input_reader: {
  tf_record_input_reader {
    input_path: "/research/byu2/rchen/proj/cuhsd/hsd-od/benchmark/tfrecord/hotspot_train_iccad.record"
  }
  label_map_path: "/research/byu2/rchen/proj/cuhsd/hsd-od/benchmark/hotspot_label_map.pbtxt"
}

eval_config: {
  #no overlap:8/33/55
  #overlap:18/88/65
  num_examples: 96
  # Note: The below line limits the evaluation process to 10 evaluations.
  # Remove the below line to evaluate indefinitely.
  max_evals: 1
  min_score_threshold: 0.9
  num_visualizations: 96
  visualize_groundtruth_boxes: true
  groundtruth_box_visualization_color: 'red'
  visualization_export_dir: "/research/byu2/rchen/proj/region_based_hotspot_detection/result/hd_det_result_right_half_encoder_decoder_rcnn_inception_v2_dropout0.5_l2regular0.2_IOU_UPDATE/vis_result"
}

eval_input_reader: {
  tf_record_input_reader {
    input_path: "/research/byu2/rchen/proj/cuhsd/hsd-od/benchmark/tfrecord/hotspot_eval_iccad.record"
  }
  label_map_path: "/research/byu2/rchen/proj/cuhsd/hsd-od/benchmark/hotspot_label_map.pbtxt"
  load_instance_masks: true
  shuffle: false
  num_readers: 1
}